.container {
    display: grid;
    width: 100%;
    height:800px;
    grid-template-columns: 200px 1fr 1fr;
    grid-template-rows: 80px 1fr 1fr 100px;
    grid-gap: 1rem;
  }
  
  .header {
    grid-row: 1 / 2;
    grid-column: 1 / 4;
    background-color: blue;
   
  }
  
  .sidebar {
    grid-row: 2 / 4;
    grid-column: 1 / 2;
    background-color: rgb(119, 119, 201);
  }
  
  .content-1 {
    grid-row: 2 / 3;
    grid-column: 2 / 4;
    background-color: blueviolet;
  }
  
  .content-2 {
    grid-row: 3 / 4;
    grid-column: 2 / 3;
    background-color: brown;
  }
  
  .content-3 {
    grid-row: 3 / 4;
    grid-column: 3 / 4;
    background-color: rgb(58, 143, 143);
  }
  
  .footer {
    grid-row: 4 / 5;
    grid-column: 1 / 4;
    background-color: aquamarine;
  }
        
  .flex-container {
    display: flex;
    max-width: 1080px;
    width: 90%;             /*ancho disponible*/
    list-style-type: none;
    margin: 0;
    background-color: aqua;
  }
  .item{
    height: 200px;
    width: 200px; /* alto disponible */
    line-height: 200px;
    font-size: 20px;
    background-color: blue;
    color: brown;
    text-align: center;
    margin: 5px 5px; /*De la misma manera que con padding, podemos asignar también 2, 3 y hasta 4 valores para la propiedad.*/
  }
#item1{order: 3;}  /* da la orden en la quie aparece */
#item2{order: 4;}
#item3{order: 1;}
#item4{order: 2;}

/*“si como mínimo el viewport tiene N píxeles de ancho, apliquemos estas reglas”.*/
@media (min-width: 480px){body {background: red; }}


/*orientación (portrait o landscape) estamos diciendo: “si como
máximo el viewport tiene N píxeles de ancho y además el dispositivo está en
posición vertical/horizontal,*/
/*@media (max-width: 768px) and (orientation: landscape){body {background: rgb(0, 255, 0);}}*/

/*“si como máximo viewport tiene N píxeles de ancho, apliquemos estas reglas”.*/
@media (max-width: 768px){ body { background: yellow;}}